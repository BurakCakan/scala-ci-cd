name: Scala CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
      -
permissions:
  checks: write
  pull-requests: write

jobs:

  branch-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name
        shell: bash
        run: |
          branch_name=$(echo "${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}")
          if [[ "${{ github.event_name }}" == 'pull_request' ]] && [[ $branch_name == feature/* || $branch_name == fix/* ]]; then
          echo "Branch name starts with 'feature/' or 'fix/'."
          elif [[ "${{ github.event_name }}" != 'pull_request' ]]; then
          echo "Skipping branch name check for merge operation."
          exit 0
          else
          echo "Branch name should start with 'feature/' or 'fix/'."
          exit 1
          fi

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Linter
        run: mvn scalafmt:format

      - name: Build and Test
        run: |
          mvn clean compile test
          mvn surefire-report:report

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: Test Report
          path: target/

      - name: target file
        uses: bash
        run: ls -l ./target/

#added for trial:
  #    - name: Publish Test Results
  #      uses: EnricoMi/publish-unit-test-result-action@v2
  #      if: always()
  #      with:
  #        files: |
  #          test-results/**/*.xml
  #          test-results/**/*.trx
  #          test-results/**/*.json

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dhrj
          path: target/

  deploy:

    needs: build
    runs-on: ubuntu-latest

    steps:

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dhrj

      - name: Build Tarball
        shell: bash
        run: |
          GIT_SHORT_SHA=$(echo ${{github.sha}} | cut -c 1-7)
          BUILD_NUMBER=${{github.run_number}}
          echo "setting up path"
          pwd
          ls -lrt |head -10
          echo "Build number is $BUILD_NUMBER" > deploy.info
          echo "Git commit is $GIT_SHORT_SHA" >> deploy.info
          
          echo "creating tarball dhrj-${GIT_SHORT_SHA}-bn${BUILD_NUMBER}.tar.gz"
          ls -lrt |head -10
          tar czf dhrj-${GIT_SHORT_SHA}-bn${BUILD_NUMBER}.tar.gz *
          tar -tf dhrj-${GIT_SHORT_SHA}-bn${BUILD_NUMBER}.tar.gz

      - name: List full directory
        run: ls -la

      - name: Creating DAR package
        shell: bash
        run: |
          GIT_SHORT_SHA=$(echo ${{github.sha}} | cut -c 1-7)
          BUILD_NUMBER=${{github.run_number}}
          pwd
          mkdir dataAvailabilityveritas_dax
  
          mv dhrj-${GIT_SHORT_SHA}-bn${BUILD_NUMBER}.tar.gz dataAvailabilityveritas_dax/
  
          echo "Creating deployit-manifest.xml"
          cat > deployit-manifest.xml <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <udm.DeploymentPackage version="${BUILD_NUMBER}" application="dataAvailabilityveritas_dax">
            <deployables>
              <dax.Package name="dataAvailabilityveritas_dax" file="dataAvailabilityveritas_dax/dhrj-${GIT_SHORT_SHA}-bn${BUILD_NUMBER}.tar.gz">
                <targetDir>/app/emav/datahub/ACC/burak/artifacts</targetDir>
              </dax.Package>
            </deployables>
          </udm.DeploymentPackage>
          EOF
          cat deployit-manifest.xml
          echo "creating DAR package"
          zip -r dhrj-v${BUILD_NUMBER}.dar deployit-manifest.xml dataAvailabilityveritas_dax
  
          echo "listing files"
          ls -lrt .

# Open these lines after sending credentials for XL Deploy:

  #    - name: Set up XL Deploy
  #      uses: xebialabs/xld-github-action@v1
  #      with:
  #        xl-deploy-url: ${{ secrets.XL_DEPLOY_URL }}
  #        xl-deploy-username: ${{ secrets.XL_DEPLOY_USERNAME }}
  #        xl-deploy-password: ${{ secrets.XL_DEPLOY_PASSWORD }}

  #    - name: Upload DAX file to XL Deploy
  #      run: |
  #        xl apply -f **/*.dar


  #API Request way for XL Deploy:

    #  - name: Deploy to XL Deploy
    #    run: |
    #      curl -X POST -u ${{ secrets.XL_DEPLOY_USERNAME }}:${{ secrets.XL_DEPLOY_PASSWORD }} -F "file=@path/to/your/dax/file.dax" https://xldeploy.example.com/deploy(maybe: ${{ secrets.XL_DEPLOY_URL }} )
